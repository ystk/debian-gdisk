--- a/gpt.cc
+++ b/gpt.cc
@@ -913,6 +913,14 @@
    } // if
    *crcOk = CheckHeaderCRC(&tempHeader);
 
+   if (tempHeader.sizeOfPartitionEntries != sizeof(GPTPart)) {
+       cerr << "Warning: Partition table header claims that the size of partition table\n";
+       cerr << "entries is " << tempHeader.sizeOfPartitionEntries << " bytes, but this program ";
+       cerr << " supports only " << sizeof(GPTPart) << "-byte entries.\n";
+       cerr << "Adjusting accordingly, but partition table may be garbage.\n";
+       tempHeader.sizeOfPartitionEntries = sizeof(GPTPart);
+   }
+
    if (allOK && (numParts != tempHeader.numParts) && *crcOk) {
       allOK = SetGPTSize(tempHeader.numParts, 0);
    }
@@ -930,7 +938,10 @@
    uint32_t sizeOfParts, newCRC;
    int retval;
 
-   if (disk.OpenForRead()) {
+   if (header.sizeOfPartitionEntries != sizeof(GPTPart)) {
+      cerr << "Error! GPT header contains invalid partition entry size!\n";
+      retval = 0;
+   } else if (disk.OpenForRead()) {
       if (sector == 0) {
          retval = disk.Seek(header.partitionEntriesLBA);
       } else {
